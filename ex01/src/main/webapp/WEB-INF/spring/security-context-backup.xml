<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:security="http://www.springframework.org/schema/security"
	xsi:schemaLocation="http://www.springframework.org/schema/security
http://www.springframework.org/schema/security/spring-security.xsd
http://www.springframework.org/schema/beans
http://www.springframework.org/schema/beans/spring-beans.xsd">

	<bean id="customAccessDenied"
	class="net.daum.security.CustomAccessDeniedHandler"/>
	<!-- bean 단위가 자바에서는 하나의 클래스 단위이다. CustomAccessDeniedHandler빈아이디 객체명
	customAccessDenied를 생성 -->
	
	<bean id="customLoginSuccess"
	class="net.daum.security.CustomLoginSuccessHandler" />
	
	<!--  
	<bean id="customPasswordEncoder"
	class="net.daum.security.CustomNoOpPasswordEncoder"/>
	-->
	
	<bean id="bcryptPasswordEncoder"
	class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder" />
	<!-- 
		1.스프링 시큐리티에서 제공하는 BCryptPasswordEncoder 클래스를 이용해서 비밀번호를 암호화
		   처리한다.
		2.bcrypt는 비밀번호를 저장하는 용도로 설계된 것으로 특정 문자열을 암호화 한다.체크 하는 쪽에서
		  는 암호화된 패스워드 인지 확인하고 다시 원본 비번으로 되돌리지(복호화) 못한다.
		3.스프링 시큐리티 api안에 포함 되어있다.
	 -->
	
	<security:http><!-- 스프링 시큐리티가 http프로토콜(통신규약)에서 알수있게 하는 시작 지점 설정 -->
	
		<security:intercept-url pattern="/sample/all" access="permitAll"/>
		<!-- pattern에 지정한 /sample/all URL매핑주소에 접근할때 스프링 시큐리티 인터셉터
			를 이용해서 중간에 자료를 가로챈 다음 access속성에 접근권한 벙위를 지정한다.
			permitAll은 모든 사용자 접근 권한을 허용한다. -->
			
		<security:intercept-url pattern="/sample/member" 
		access="hasRole('ROLE_MEMBER')"/>
		<!-- ROLE_MEMBER는 로그인한 사용자만 접근 가능 -->
		
		<security:intercept-url pattern="/sample/admin"
		 access="hasRole('ROLE_ADMIN')"/>
		 <!-- 로그인한 사용자 중에서 admin관리자 권한을 가진 사용자만 접근 가능 -->
		<!--
		<security:access-denied-handler error-page="/accessError"/>
		 403접근 금지 에러가 발생했을때 accessError URL 매핑주소가 실행됨 -->
		 
		 <security:access-denied-handler ref="customAccessDenied"/>
		 <!-- 403 접근금지 에러가 발생했을때 빈아이디 customAccessDenied를 호출한다. -->
		 
		<!--<security:form-login/> 시큐리티 폼 로그인 설정 : 스프링 시큐리티 자체 폼로그인 실행 -->
	
		<security:form-login login-page="/customLogin"
		authentication-success-handler-ref="customLoginSuccess"/>
		<!-- 커스텀 로그인 페이지로 이동하는 매핑주소 customLogin등록 ,
		authentication-success-handler-ref 속성은 로그인 성공시 customLoginSuccess
		 빈아이디 호출 -->
		 
		 <security:logout logout-url="/customLogout" invalidate-session="true" />
		 <!-- 로그아웃시 customLogout 매핑주소가 실행.invalidate-session="true"는
		 	세션을 무효화 즉 로그아웃 시킴 -->
	</security:http>
	
	<security:authentication-manager> <!-- 스프링 시큐리티가 동작하기위해서는 
	인증관리자(authentication-manager) 설정 -->
	  <security:authentication-provider><!-- 인증 제공자 -->
	    <security:user-service>
	      <security:user name="member" password="{noop}member"
	       authorities="ROLE_MEMBER"/>
	       <!-- 아이디가 member,비번이 member인 사용자는 로그인 인증 처리를 한다. {noop}는
	       		비번을 인코딩 즉 암호화 처리 없이 사용한다. -->
	       		
	      <security:user name="admin" password="{noop}admin"
	       authorities="ROLE_MEMBER, ROLE_ADMIN"/>
	       <!-- 아이디가 admin, 비번이admin인 사용자는 /sample/member와 /sample/admin
	       		에 모두 접근 가능하다. --> 		
	       		
	    </security:user-service>
	  </security:authentication-provider>
	</security:authentication-manager>
	
	
	<security:authentication-manager> <!-- 인증 관리자 -->
	  <security:authentication-provider><!-- 인증 제공자 -->
	    <!-- <security:jdbc-user-service data-source-ref="dataSource"/>
	    root-context.xml에 설정된 오라클 연결 빈아이디 dataSource를 호출 하면서 데이터 베이스 연결.
	     -->
	    	
	   <!-- <security:password-encoder ref="customPasswordEncoder"/>
	     CustomNoOpPasswordEncoder 빈아이디 객체명 customPasswordEncoder호출-->
	    	
	    <security:password-encoder ref="bcryptPasswordEncoder" />
	    <!-- 시큐리티 비번 암호화 => ref속성값 빈아이디 bcryptPasswordEncoder 객체를 호출 -->	
	    
	    <security:jdbc-user-service data-source-ref="dataSource"
	    	users-by-username-query="select userid,userpw,enabled from tbl_member
	    	where userid=? "
	    	authorities-by-username-query="select userid,auth from tbl_member_auth
	    	where userid=?" 
	    	/>
	    	<!-- users-by-username-query는 인증을 하는데 필요한쿼리이고, ahtorities-by-username-query
	    	는 권한을  확인하는데 필요한 쿼리이다 -->
	    
	  </security:authentication-provider>
	</security:authentication-manager>
</beans>
